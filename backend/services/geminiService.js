// backend/services/geminiService.js
// Use global fetch if available (Node 18+), otherwise require node-fetch
const fetch = globalThis.fetch || require('node-fetch');

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.baseURL = 'https://generativelanguage.googleapis.com/v1beta';
    this.model = 'gemini-2.0-flash';
    
    // Check if API key is properly configured
    this.isConfigured = this.apiKey && this.apiKey.length > 0;
  }

  /**
   * Validate topic input
   * @param {string} topic - The topic to validate
   * @returns {boolean} - Whether the topic is valid
   */
  validateTopic(topic) {
    if (!topic || typeof topic !== 'string') {
      return false;
    }
    
    const trimmed = topic.trim();
    return trimmed.length >= 5 && trimmed.length <= 200;
  }

  /**
   * Format the prompt for content generation
   * @param {string} topic - The topic for content generation
   * @param {Object} options - Generation options
   * @returns {string} - Formatted prompt
   */
  formatPrompt(topic, options = {}) {
    const { tone = 'professional', length = 'medium' } = options;
    
    let wordTarget;
    switch (length) {
      case 'short':
        wordTarget = '300-500';
        break;
      case 'long':
        wordTarget = '800-1200';
        break;
      default:
        wordTarget = '500-800';
    }

    let toneGuidance;
    switch (tone) {
      case 'casual':
        toneGuidance = 'Use a friendly, conversational tone with personal anecdotes and relatable examples.';
        break;
      case 'academic':
        toneGuidance = 'Use a formal, scholarly tone with proper citations and structured arguments.';
        break;
      default:
        toneGuidance = 'Use a professional, informative tone that is accessible to a general audience.';
    }

    return `Write a comprehensive blog post about "${topic}". 

Requirements:
- ${toneGuidance}
- Target length: ${wordTarget} words
- Include an engaging introduction that hooks the reader
- Organize content into clear sections with informative subheadings
- Provide detailed, valuable information in the main content
- Include practical examples or insights where relevant
- End with a compelling conclusion that summarizes key points
- Write in a way that is informative, well-structured, and engaging

The blog post should be ready to publish and provide real value to readers interested in this topic.`;
  }

  /**
   * Parse and validate the API response
   * @param {Object} response - Raw API response
   * @returns {Object} - Parsed content result
   */
  parseResponse(response) {
    if (!response.candidates || response.candidates.length === 0) {
      throw new Error('No content generated by AI');
    }

    const candidate = response.candidates[0];
    if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
      throw new Error('Invalid response format from AI');
    }

    const generatedText = candidate.content.parts[0].text;
    
    if (!generatedText || generatedText.trim().length < 200) {
      throw new Error('Generated content is too short or empty');
    }

    // Extract title from content (look for first line or # heading)
    const lines = generatedText.split('\n').filter(line => line.trim());
    let title = 'AI Generated Blog Post';
    let content = generatedText;

    // Try to extract title from markdown heading
    const firstLine = lines[0];
    if (firstLine && (firstLine.startsWith('#') || firstLine.length < 100)) {
      title = firstLine.replace(/^#+\s*/, '').trim();
      // Remove title from content
      content = lines.slice(1).join('\n').trim();
    }

    return {
      title: title.substring(0, 200), // Ensure title doesn't exceed limit
      content: this.sanitizeContent(content)
    };
  }

  /**
   * Sanitize generated content
   * @param {string} content - Raw content
   * @returns {string} - Sanitized content
   */
  sanitizeContent(content) {
    // Remove potential harmful scripts or HTML
    return content
      .replace(/<script[^>]*>.*?<\/script>/gi, '')
      .replace(/<iframe[^>]*>.*?<\/iframe>/gi, '')
      .replace(/javascript:/gi, '')
      .replace(/on\w+\s*=/gi, '')
      .trim();
  }

  /**
   * Generate blog content using Gemini API
   * @param {string} topic - The topic for content generation
   * @param {Object} options - Generation options
   * @returns {Promise<Object>} - Generated content
   */
  async generateContent(topic, options = {}) {
    if (!this.isConfigured) {
      throw new Error('Gemini API is not properly configured. Please add a valid API key to your .env file.');
    }

    if (!this.validateTopic(topic)) {
      throw new Error('Topic must be between 5 and 200 characters');
    }

    const prompt = this.formatPrompt(topic, options);
    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: prompt
            }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2048,
      }
    };

    try {
      const response = await fetch(
        `${this.baseURL}/models/${this.model}:generateContent?key=${this.apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        }
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        
        if (response.status === 429) {
          throw new Error('Rate limit exceeded. Please try again in a few minutes.');
        } else if (response.status === 400) {
          throw new Error('Invalid request. Please check your topic and try again.');
        } else if (response.status === 403) {
          throw new Error('API access denied. Please check your API key configuration.');
        } else {
          throw new Error(`API request failed: ${errorData.error?.message || 'Unknown error'}`);
        }
      }

      const data = await response.json();
      return this.parseResponse(data);

    } catch (error) {
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error('Network error. Please check your internet connection.');
      }
      throw error;
    }
  }
}

module.exports = new GeminiService();